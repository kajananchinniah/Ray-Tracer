.TH "/home/kajanan/Github/ray_tracer/src/common/include/common/cuda_memory_utils.hpp" 3 "Fri Dec 24 2021" "ray_tracer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/kajanan/Github/ray_tracer/src/common/include/common/cuda_memory_utils.hpp \- Contains useful functions to handle cuda memory\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'common_types\&.hpp'\fP
.br
\fC#include 'cuda\&.h'\fP
.br
\fC#include 'cuda_runtime\&.h'\fP
.br
\fC#include <memory>\fP
.br
\fC#include <type_traits>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBRayTracer::cuda::lowlevel::allocateCudaMemory\fP (u64 byte_size)"
.br
.RI "Allocates unified cuda memory\&. "
.ti -1c
.RI "void \fBRayTracer::cuda::lowlevel::prefetchToGpu\fP (const void *ptr, u64 byte_size)"
.br
.RI "Prefetches unified cuda memory to device\&. "
.ti -1c
.RI "void \fBRayTracer::cuda::lowlevel::prefetchToCpu\fP (const void *ptr, u64 byte_size)"
.br
.RI "Prefetches unified cuda memory to host\&. "
.ti -1c
.RI "void \fBRayTracer::cuda::lowlevel::copyCudaMemory\fP (void *dst, const void *src, u64 byte_size, cudaMemcpyKind kind=cudaMemcpyDefault)"
.br
.RI "Copies cuda memory from source into destiation\&. "
.ti -1c
.RI "template<typename T > std::unique_ptr< T[], decltype(&cudaFree)> \fBRayTracer::cuda::createCudaUniquePtrArray\fP (u64 size)"
.br
.RI "Allocates a cuda allocated aray and wraps it around a pointer\&. "
.ti -1c
.RI "template<typename T > void \fBRayTracer::cuda::prefetchToGpu\fP (const T *ptr, u64 size)"
.br
.RI "Prefetches unified cuda memory to device\&. "
.ti -1c
.RI "template<typename T > void \fBRayTracer::cuda::prefetchToCpu\fP (const T *ptr, u64 size)"
.br
.RI "Prefetches unified cuda memory to host\&. "
.ti -1c
.RI "template<typename T > void \fBRayTracer::cuda::copyCudaMemory\fP (T *dst, const T *src, u64 size, cudaMemcpyKind kind=cudaMemcpyDefault)"
.br
.RI "Copies cuda memory from source into destiation\&. "
.ti -1c
.RI "void \fBRayTracer::cuda::deallocateCudaMemory\fP (void *ptr)"
.br
.RI "Deallocates a cuda allocated pointer\&. Note that the deallocated pointer will be invalid, but will not be set to null\&. "
.in -1c
.SH "Detailed Description"
.PP 
Contains useful functions to handle cuda memory\&. 


.SH "Function Documentation"
.PP 
.SS "void * RayTracer::cuda::lowlevel::allocateCudaMemory (\fBu64\fP byte_size)"

.PP
Allocates unified cuda memory\&. 
.PP
\fBParameters\fP
.RS 4
\fIbyte_size\fP The number of bytes that should be allocated 
.RE
.PP
\fBReturns\fP
.RS 4
The newly allocated pointer\&. This should be type casted 
.RE
.PP

.SS "template<typename T > void RayTracer::cuda::copyCudaMemory (T * dst, const T * src, \fBu64\fP size, cudaMemcpyKind kind = \fCcudaMemcpyDefault\fP)"

.PP
Copies cuda memory from source into destiation\&. 
.PP
\fBParameters\fP
.RS 4
\fIT\fP the type of the pointer 
.br
\fIdst\fP The destination pointer 
.br
\fIsrc\fP The source pointer 
.br
\fIsize\fP The number of elements to copy 
.br
\fIcudaMemcpyKind\fP the type of copy that should occur 
.RE
.PP

.SS "void RayTracer::cuda::lowlevel::copyCudaMemory (void * dst, const void * src, \fBu64\fP byte_size, cudaMemcpyKind kind = \fCcudaMemcpyDefault\fP)"

.PP
Copies cuda memory from source into destiation\&. 
.PP
\fBParameters\fP
.RS 4
\fIdst\fP The destination pointer 
.br
\fIsrc\fP The source pointer 
.br
\fIbyte_size\fP The number of bytes to copy 
.br
\fIcudaMemcpyKind\fP the type of copy that should occur 
.RE
.PP

.SS "template<typename T > std::unique_ptr< T[], decltype(&cudaFree)> RayTracer::cuda::createCudaUniquePtrArray (\fBu64\fP size)"

.PP
Allocates a cuda allocated aray and wraps it around a pointer\&. 
.PP
\fBParameters\fP
.RS 4
\fIT\fP the type of the array 
.br
\fIsize\fP The requested size to allocate 
.RE
.PP

.SS "void RayTracer::cuda::deallocateCudaMemory (void * ptr)"

.PP
Deallocates a cuda allocated pointer\&. Note that the deallocated pointer will be invalid, but will not be set to null\&. 
.PP
\fBParameters\fP
.RS 4
\fIptr\fP The pointer that will be deallocated\&. 
.RE
.PP

.SS "template<typename T > void RayTracer::cuda::prefetchToCpu (const T * ptr, \fBu64\fP size)"

.PP
Prefetches unified cuda memory to host\&. 
.PP
\fBParameters\fP
.RS 4
\fIT\fP the type of the pointer 
.br
\fIptr\fP The pointer to cuda allocated memory 
.br
\fIsize\fP The number of elements to prefetch 
.RE
.PP

.SS "void RayTracer::cuda::lowlevel::prefetchToCpu (const void * ptr, \fBu64\fP byte_size)"

.PP
Prefetches unified cuda memory to host\&. 
.PP
\fBParameters\fP
.RS 4
\fIptr\fP The pointer to cuda allocated memory 
.br
\fIbyte_size\fP The number of bytes to prefetch 
.RE
.PP

.SS "template<typename T > void RayTracer::cuda::prefetchToGpu (const T * ptr, \fBu64\fP size)"

.PP
Prefetches unified cuda memory to device\&. 
.PP
\fBParameters\fP
.RS 4
\fIT\fP the type of the pointer 
.br
\fIptr\fP The pointer to cuda allocated memory 
.br
\fIsize\fP The number of elements to prefetch 
.RE
.PP

.SS "void RayTracer::cuda::lowlevel::prefetchToGpu (const void * ptr, \fBu64\fP byte_size)"

.PP
Prefetches unified cuda memory to device\&. 
.PP
\fBParameters\fP
.RS 4
\fIptr\fP The pointer to cuda allocated memory 
.br
\fIbyte_size\fP The number of bytes to prefetch 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for ray_tracer from the source code\&.
